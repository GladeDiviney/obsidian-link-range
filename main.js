/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkRange
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// main.ts
var import_view3 = require("@codemirror/view");

// src/settings.ts
var import_obsidian = require("obsidian");

// src/utils.ts
var path = __toESM(require("path"));
function parseHrefLink(href, settings) {
  const linkRegex = /([^#|]*)#?([^#|]*)?\|?(.*)?/;
  const matches = linkRegex.exec(href);
  if (matches == null || matches.length < 3 || matches[2] == void 0) {
    return null;
  }
  const note = matches[1];
  const partialPath = note + ".md";
  const basePart = path.basename(note);
  const file = app.vault.getMarkdownFiles().filter(
    (x) => x.basename == basePart && x.path.endsWith(partialPath)
  ).first();
  if (!file)
    return null;
  const pattern = findPatternForFile(file, settings);
  const split = matches[2].split(settings.headingSeparator);
  const h1 = split[0];
  const h2 = split[1];
  let altText = "";
  if (matches.length > 3 && matches[3] != void 0) {
    altText = matches[3];
  } else {
    const headingVisual = pattern.headingVisual === "" ? "#" : pattern.headingVisual;
    const headingSeparatorVisual = pattern.headingSeparatorVisual === "" ? settings.headingSeparator : pattern.headingSeparatorVisual;
    if (h2 !== void 0) {
      altText = `${basePart}${headingVisual}${h1}${headingSeparatorVisual}${h2}`;
    } else {
      altText = `${basePart}${headingVisual}${h1}`;
    }
  }
  return {
    note,
    h1,
    h2,
    altText,
    pattern,
    file,
    // Will find these later 
    h1Line: 0,
    h2Line: void 0
  };
}
function parseLink(app2, linkHTML, settings, isEmbed = false, hrefField = "data-href") {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const href = linkHTML.getAttribute(hrefField);
  if (href == null)
    return null;
  const res = parseHrefLink(href, settings);
  if (!res || app2.metadataCache == null)
    return null;
  const alt = linkHTML.getAttribute("alt");
  if (alt != null && !alt.contains(res.note)) {
    res.altText = alt;
  }
  if (!isEmbed && !linkHTML.innerText.contains(res.note)) {
    res.altText = linkHTML.innerText;
  }
  const meta = app2.metadataCache.getFileCache(res.file);
  if (meta == void 0 || meta.headings == void 0) {
    return null;
  }
  const h1Line = (_b = (_a = meta == null ? void 0 : meta.headings) == null ? void 0 : _a.filter(
    (h) => h.heading == res.h1
  ).first()) == null ? void 0 : _b.position.start.line;
  if (h1Line == void 0)
    return null;
  res.h1Line = h1Line;
  if (res.h2 !== void 0) {
    if (settings.endInclusive) {
      let h2LineIndex = (_c = meta == null ? void 0 : meta.headings) == null ? void 0 : _c.findIndex((h) => h.heading == res.h2);
      if (((_d = meta == null ? void 0 : meta.headings) == null ? void 0 : _d.length) > h2LineIndex) {
        h2LineIndex += 1;
      }
      res.h2Line = (_f = (_e = meta == null ? void 0 : meta.headings) == null ? void 0 : _e.at(h2LineIndex)) == null ? void 0 : _f.position.end.line;
    } else {
      res.h2Line = (_h = (_g = meta == null ? void 0 : meta.headings) == null ? void 0 : _g.filter(
        (h) => h.heading == res.h2
      ).first()) == null ? void 0 : _h.position.end.line;
    }
  }
  return res;
}
function postProcessorUpdate(app2) {
  for (const leaf of app2.workspace.getLeavesOfType("markdown")) {
    const view = leaf.view;
    view.previewMode.renderer.clear();
    view.previewMode.renderer.set(view.editor.cm.state.doc.toString());
  }
  app2.workspace.updateOptions();
}
function findPatternForFilename(fileName, settings) {
  const file = app.vault.getFiles().find((file2) => file2.basename === fileName);
  return findPatternForFile(file, settings);
}
function findPatternForFile(file, settings) {
  if (file) {
    let pattern = [...settings.patterns].reverse().find(
      (pattern2) => file.path.startsWith(pattern2.path)
    );
    if (pattern)
      return pattern;
  }
  return settings.getDefaultPattern();
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  headingSeparator: "..",
  endInclusive: true,
  altFormat: "",
  settingsVersion: "v2",
  patterns: [{ headingVisual: "..", headingSeparatorVisual: "-", path: "/" }],
  getDefaultPattern() {
    const first = this.patterns[0];
    if (!first) {
      return { headingVisual: ":", headingSeparatorVisual: "-", path: "/" };
    }
    return first;
  }
};
var LinkRangeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    this.migrateOldSettings();
  }
  migrateOldSettings() {
    const stgs = this.plugin.settings;
    const hasV1Settings = stgs.altFormat != void 0 && stgs.altFormat.length > 0;
    if (hasV1Settings) {
      const altFormat = stgs.altFormat;
      const indexOfNote = altFormat.indexOf("$note");
      const indexOfH1 = altFormat.indexOf("$h1");
      const indexOfH2 = altFormat.indexOf("$h2");
      const formatIsValid = indexOfNote === 0 && indexOfH1 !== -1 && indexOfH2 !== -2;
      if (formatIsValid) {
        const firstValue = altFormat.substring("$note".length, indexOfH1);
        const secondValue = altFormat.substring(indexOfH1 + "$h1".length, indexOfH2);
        stgs.patterns = [{ headingVisual: firstValue, headingSeparatorVisual: secondValue, path: "" }];
      }
      stgs.altFormat = "";
      this.plugin.saveSettings();
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.createH2("Settings for link-range plugin");
    new import_obsidian.Setting(containerEl).setName("Heading Separator").setDesc('Defines the separator to be used to define a link heading range. Defaults to ".." (e.g. [[Note Name#h1..h2]])').addText((text) => text.setPlaceholder("Enter a separator string (defaults to ..)").setValue(this.plugin.settings.headingSeparator).onChange(async (value) => {
      this.plugin.settings.headingSeparator = value;
      await this.plugin.saveSettings();
      postProcessorUpdate(this.app);
    }));
    new import_obsidian.Setting(containerEl).setName("End Inclusive").setDesc("Whether or not the end heading should be inclusive or exclusive").addToggle((bool) => bool.setValue(this.plugin.settings.endInclusive).onChange(async (value) => {
      this.plugin.settings.endInclusive = value;
      await this.plugin.saveSettings();
      postProcessorUpdate(this.app);
    }));
    new import_obsidian.Setting(this.containerEl).setName("Add a New Visual Pattern").setDesc("Add new pattern to match files in a directory. The first value will change the visual for the heading in a link. The second value will change the visual for separator. The third specifies the folder in which the files must be to match. The first match, starting bottom up, will be applied. Therefore, the first is the default pattern.").addButton((button) => {
      button.setTooltip("Add new pattern to match files in a directory.").setButtonText("+").setCta().onClick(() => {
        this.plugin.settings.patterns.push({
          headingVisual: "",
          headingSeparatorVisual: "",
          path: ""
        });
        this.plugin.saveSettings();
        this.display();
      });
    });
    this.plugin.settings.patterns.forEach(
      (pattern, index) => {
        const s = new import_obsidian.Setting(this.containerEl).addText((text) => text.setPlaceholder("Enter a heading override").setValue(pattern.headingVisual).onChange(async (value) => {
          pattern.headingVisual = value;
          await this.plugin.saveSettings();
          postProcessorUpdate(this.app);
        })).addText((text) => text.setPlaceholder("Enter a separator override").setValue(pattern.headingSeparatorVisual).onChange(async (value) => {
          pattern.headingSeparatorVisual = value;
          await this.plugin.saveSettings();
          postProcessorUpdate(this.app);
        })).addText((text) => text.setPlaceholder(index === 0 ? "(global)" : "Enter a path").setValue(pattern.path).setDisabled(index === 0).onChange(async (value) => {
          pattern.path = value;
          await this.plugin.saveSettings();
          postProcessorUpdate(this.app);
        }));
        if (index === 0) {
          s.addExtraButton((cb) => {
            cb.setIcon("lock").setTooltip("This pattern is the default and cannot be completed");
          });
        } else {
          if (index !== 0) {
            s.addExtraButton((cb) => {
              cb.setIcon("cross").setTooltip("Delete").onClick(() => {
                this.plugin.settings.patterns.splice(
                  index,
                  1
                );
                this.plugin.saveSettings();
                this.display();
              });
            });
          }
        }
      }
    );
  }
  createH2(text) {
    const { containerEl } = this;
    containerEl.createEl("h2", { text });
  }
};

// src/embeds.ts
var import_obsidian2 = require("obsidian");
async function replaceEmbed(embed, settings) {
  let embedHtml = embed;
  const link = parseLink(app, embedHtml, settings, true, "src");
  if (link == void 0) {
    return;
  }
  const isLinkRange = link.h2 !== void 0;
  if (!isLinkRange) {
    if (link.pattern !== settings.getDefaultPattern()) {
      updateHeading(embedHtml, link.altText);
    }
    return;
  }
  const { vault } = app;
  updateHeading(embedHtml, link.altText);
  const contentDiv = embedHtml.querySelector("div.markdown-embed-content");
  if (contentDiv == null || !(contentDiv instanceof HTMLElement))
    return;
  while (contentDiv.lastElementChild) {
    contentDiv.removeChild(contentDiv.lastElementChild);
  }
  contentDiv.childNodes.forEach((x) => {
    x.remove();
  });
  const fileContent = await vault.cachedRead(link.file);
  let lines = fileContent.split("\n");
  lines = lines.slice(link.h1Line, link.h2Line);
  import_obsidian2.MarkdownRenderer.renderMarkdown(lines.join("\n"), contentDiv, "", null);
  const linkDiv = embedHtml.querySelector("div.markdown-embed-link");
  if (linkDiv instanceof HTMLElement) {
    const newLink = linkDiv.cloneNode(true);
    linkDiv.replaceWith(newLink);
    newLink.onClickEvent((ev) => {
      const leaf = app.workspace.getMostRecentLeaf();
      const startLoc = Object.assign({ line: 0, col: 0, offset: 0 }, 0);
      const endLoc = Object.assign({ line: 0, col: 0, offset: 0 }, 0);
      const { line, col } = startLoc;
      const state = {
        eState: {
          startLoc,
          endLoc,
          line,
          cursor: {
            from: { line, ch: 0 },
            to: { line, ch: 0 }
          }
        }
      };
      leaf == null ? void 0 : leaf.openFile(link.file, state);
    });
  }
}
function updateHeading(elem, title, observer = void 0) {
  var _a;
  const titleElem = elem.querySelector(".embed-title.markdown-embed-title");
  const firstHeading = elem.querySelector("H1,H2,H3,H4,H5,H6");
  if (titleElem != null && firstHeading != null) {
    titleElem.setText(title);
    (_a = firstHeading.parentNode) == null ? void 0 : _a.removeChild(firstHeading);
    observer == null ? void 0 : observer.disconnect();
    return;
  }
  if (observer == void 0) {
    new MutationObserver((_, observer2) => {
      updateHeading(elem, title, observer2);
    }).observe(
      elem,
      { attributes: false, childList: true, subtree: true }
    );
  }
}

// src/markdownPostProcessor.ts
function linkRangePostProcessor(el, settings) {
  const links = el.querySelectorAll("a.internal-link");
  links.forEach((link) => {
    const htmlLink = link;
    const res = parseLink(app, htmlLink, settings);
    if (res !== null) {
      if (res.altText) {
        htmlLink.setText(res.altText);
      }
      htmlLink.setAttribute("href", res.note + "#" + res.h1);
      htmlLink.setAttribute("data-href", res.note + "#" + res.h1);
      htmlLink.setAttribute("range-href", res.note + "#" + res.h1 + settings.headingSeparator + res.h2);
    }
  });
  const embeds = el.querySelectorAll("span.internal-embed");
  embeds.forEach((embed) => {
    replaceEmbed(embed, settings);
  });
}

// src/livePreviewEmbedReplacer.ts
var import_view = require("@codemirror/view");
var import_obsidian3 = require("obsidian");
var import_state = require("@codemirror/state");
var LifePreviewEmbedReplacer = class {
  constructor(settings, app2) {
    this.decorations = import_view.Decoration.none;
    this.settings = settings;
    this.app = app2;
    this.embedCount = 0;
  }
  buildDecorations(view, embeds) {
    const buffer = new import_state.RangeSetBuilder();
    embeds.forEach((embed) => {
      replaceEmbed(embed, this.settings);
    });
    return buffer.finish();
  }
  update(update) {
    if (!update.state.field(import_obsidian3.editorLivePreviewField)) {
      this.decorations = import_view.Decoration.none;
      return;
    }
    const embeds = update.view.contentDOM.querySelectorAll("div.markdown-embed");
    if (embeds.length > 0 && embeds.length != this.embedCount || update.docChanged) {
      this.embedCount = embeds.length;
      this.decorations = this.buildDecorations(update.view, embeds);
    }
  }
};

// src/livePreviewDisplayView.ts
var import_view2 = require("@codemirror/view");
var import_state2 = require("@codemirror/state");
var import_language = require("@codemirror/language");
var CharacterOverwriteWidget = class extends import_view2.WidgetType {
  constructor(char) {
    super();
    this.char = char;
  }
  toDOM() {
    let el = document.createElement("span");
    el.innerText = this.char;
    el.style.textDecoration = "underline";
    return el;
  }
};
function buildCMViewPlugin(app2, settings) {
  const viewPlugin = import_view2.ViewPlugin.fromClass(
    class {
      constructor(view) {
        this.decorations = this.buildDecorations(view, null);
        this.lastLocation = { from: 0, to: 0 };
        ;
      }
      update(update) {
        let currentLocation = {
          from: update.state.selection.ranges[0].from,
          to: update.state.selection.ranges[0].to
        };
        if (update.docChanged || update.viewportChanged) {
          this.decorations = this.buildDecorations(update.view, currentLocation);
        } else {
          let isRepeatUpdate = this.lastLocation.from == currentLocation.from && this.lastLocation.to === currentLocation.to;
          if (update.state.selection.ranges.length > 0 && !isRepeatUpdate) {
            this.decorations = this.buildDecorations(update.view, currentLocation);
          }
        }
        this.lastLocation = currentLocation;
      }
      buildDecorations(view, location) {
        let builder = new import_state2.RangeSetBuilder();
        const lastPassDecoratedRanges = this.decoratedRanges;
        this.decoratedRanges = [];
        const inLastPass = function(nodeStart, index) {
          if (index === void 0) {
            return false;
          }
          for (let i in lastPassDecoratedRanges) {
            const rng = lastPassDecoratedRanges[i];
            if (rng.from == nodeStart && index >= rng.from && index <= rng.to) {
              return true;
            }
          }
          return false;
        };
        for (let { from, to } of view.visibleRanges) {
          (0, import_language.syntaxTree)(view.state).iterate({
            from,
            to,
            enter: (node) => {
              const tokenProps = node.type.name.split("_");
              if (tokenProps) {
                const props = new Set(tokenProps);
                const isLink = props.has("hmd-internal-link");
                const isAlias = props.has("link-alias");
                const isPipe = props.has("link-alias-pipe");
                const isMDUrl = props.has("url");
                if (isLink && !isAlias && !isPipe || isMDUrl) {
                  let linkText = view.state.doc.sliceString(node.from, node.to);
                  const indexOfHeaderMarker = linkText.indexOf("#");
                  const indexOfHeaderMarkerInDoc = indexOfHeaderMarker + node.from;
                  if (indexOfHeaderMarkerInDoc >= node.from && indexOfHeaderMarkerInDoc <= node.to) {
                    if (!inLastPass(node.from - 2, location == null ? void 0 : location.from)) {
                      const fileName = linkText.substring(0, indexOfHeaderMarker);
                      const pattern = findPatternForFilename(fileName, settings);
                      if (pattern.headingVisual !== "") {
                        let overrideP2HWidget = import_view2.Decoration.widget({
                          widget: new CharacterOverwriteWidget(pattern.headingVisual)
                        });
                        builder.add(indexOfHeaderMarkerInDoc, indexOfHeaderMarkerInDoc + 1, overrideP2HWidget);
                      }
                      if (pattern.headingSeparatorVisual !== "") {
                        const indexOfRangeMarker = linkText.indexOf(settings.headingSeparator) + node.from;
                        if (indexOfRangeMarker >= node.from && indexOfRangeMarker <= node.to) {
                          let overrideH2HWidget = import_view2.Decoration.widget({
                            widget: new CharacterOverwriteWidget(pattern.headingSeparatorVisual)
                          });
                          builder.add(indexOfRangeMarker, indexOfRangeMarker + settings.headingSeparator.length, overrideH2HWidget);
                        }
                      }
                    }
                    this.decoratedRanges.push({
                      from: node.from - 2,
                      to: node.to + 2
                    });
                  }
                }
              }
            }
          });
        }
        const bufferedDecs = builder.finish();
        return bufferedDecs;
      }
    },
    {
      decorations: (v) => v.decorations
    }
  );
  return viewPlugin;
}

// main.ts
var import_state3 = require("@codemirror/state");
var LinkRange = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LinkRangeSettingTab(this.app, this));
    const settings = this.settings;
    this.registerMarkdownPostProcessor((el) => {
      linkRangePostProcessor(el, settings);
    });
    this.app.workspace.onLayoutReady(() => {
      this.registerEditorExtension(import_view3.ViewPlugin.define((v) => {
        return new LifePreviewEmbedReplacer(this.settings, this.app);
      }));
      const ext = import_state3.Prec.lowest(buildCMViewPlugin(this.app, this.settings));
      this.registerEditorExtension(ext);
      const pagePreviewPlugin = this.app.internalPlugins.plugins["page-preview"];
      const uninstaller = around(pagePreviewPlugin.instance.constructor.prototype, {
        onHoverLink(old) {
          return function(options, ...args) {
            return old.call(this, options, ...args);
          };
        },
        onLinkHover(old) {
          return function(parent, targetEl, linkText, path2, state, ...args) {
            const res = parseLink(this.app, targetEl, settings, false, "range-href");
            if (res !== null) {
              old.call(this, parent, targetEl, res.note, path2, { scroll: res.h1Line }, ...args);
            } else {
              old.call(this, parent, targetEl, linkText, path2, state, ...args);
            }
          };
        }
      });
      this.register(uninstaller);
      pagePreviewPlugin.disable();
      pagePreviewPlugin.enable();
      this.register(function() {
        if (!pagePreviewPlugin.enabled)
          return;
        pagePreviewPlugin.disable();
        pagePreviewPlugin.enable();
      });
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
